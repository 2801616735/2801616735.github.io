<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>16、字符串</title>
      <link href="/2018/10/11/16%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/10/11/16%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h5 id="1、字符"><a href="#1、字符" class="headerlink" title="1、字符"></a>1、字符</h5><p>就是用’’单引号括起来的单个字符. 如 ‘a’<a id="more"></a></p><h5 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h5><p>就是用””双引号括起来的一个或多个字符. 如 “abc”</p><h5 id="3、两者的区别"><a href="#3、两者的区别" class="headerlink" title="3、两者的区别"></a>3、两者的区别</h5><ul><li>符号不同，字符使用单引号而字符串使用双引号</li><li>从数组的角度，字符串是由至少一个字符所组成的一维数组</li></ul><h5 id="4、字符串初始化"><a href="#4、字符串初始化" class="headerlink" title="4、字符串初始化"></a>4、字符串初始化</h5><p>char 变量名[] = “字符内容”;</p><h5 id="5、代码案例"><a href="#5、代码案例" class="headerlink" title="5、代码案例"></a>5、代码案例</h5><h6 id="5-1、源代码"><a href="#5-1、源代码" class="headerlink" title="5.1、源代码"></a>5.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char s[] = &quot;xiaobei&quot;;</span><br><span class="line">printf(&quot;%s\n&quot;,s);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-2、运行结果"><a href="#5-2、运行结果" class="headerlink" title="5.2、运行结果"></a>5.2、运行结果</h6><p><img src="/img/16/1.png" alt="运行结果"></p><h5 id="6、字符串与数组的关系"><a href="#6、字符串与数组的关系" class="headerlink" title="6、字符串与数组的关系"></a>6、字符串与数组的关系</h5><h6 id="6-1、源代码"><a href="#6-1、源代码" class="headerlink" title="6.1、源代码"></a>6.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char s[] = &quot;xiaobei&quot;;</span><br><span class="line">printf(&quot;s=%p\n&quot;,s);</span><br><span class="line">printf(&quot;&amp;s=%p\n&quot;,&amp;s);</span><br><span class="line">printf(&quot;s[0]=%p\n&quot;,&amp;s[0]);</span><br><span class="line">for (int i = 0; i &lt; 7; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;s[%d]=%c\taddress=%p\n&quot;,i,s[i],&amp;s[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6-2、运行结果"><a href="#6-2、运行结果" class="headerlink" title="6.2、运行结果"></a>6.2、运行结果</h6><p><img src="/img/16/2.png" alt="运行结果"></p><h6 id="6-3、总结"><a href="#6-3、总结" class="headerlink" title="6.3、总结"></a>6.3、总结</h6><p>从运行结果可以看出，字符串可以看做是一维数组</p><h5 id="7、字符串结束符-0"><a href="#7、字符串结束符-0" class="headerlink" title="7、字符串结束符\0"></a>7、字符串结束符\0</h5><p>由上面的知识，可知字符串可以看成是一维数组，但是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char s[] = &quot;xiaobei&quot;;与char s[] = &#123;&apos;x&apos;,&apos;i&apos;,&apos;a&apos;,&apos;o&apos;,&apos;b&apos;,&apos;e&apos;,&apos;i&apos;&#125;;是不一样的</span><br></pre></td></tr></table></figure></p><h6 id="7-1、代码"><a href="#7-1、代码" class="headerlink" title="7.1、代码"></a>7.1、代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char s[] = &quot;xiaobei&quot;;</span><br><span class="line">for (int i = 0; i &lt; 8; ++i)</span><br><span class="line">&#123;</span><br><span class="line">if( s[i] == &apos;\0&apos; )&#123;</span><br><span class="line">printf(&quot;已经结束\n&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">printf(&quot;s[%d]=%c\taddress=%p\n&quot;,i,s[i],&amp;s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;==================================\n&quot;);</span><br><span class="line">char s1[] = &#123;&apos;x&apos;,&apos;i&apos;,&apos;a&apos;,&apos;o&apos;,&apos;b&apos;,&apos;e&apos;,&apos;i&apos;&#125;;</span><br><span class="line">for (int i = 0; i &lt; 8; ++i)</span><br><span class="line">&#123;</span><br><span class="line">if( s1[i] == &apos;\0&apos; )&#123;</span><br><span class="line">printf(&quot;已经结束\n&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">printf(&quot;s[%d]=%c\taddress=%p\n&quot;,i,s1[i],&amp;s1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="7-2、运行结果"><a href="#7-2、运行结果" class="headerlink" title="7.2、运行结果"></a>7.2、运行结果</h6><p><img src="/img/16/3.png" alt="运行结果"></p><h6 id="7-3、总结"><a href="#7-3、总结" class="headerlink" title="7.3、总结"></a>7.3、总结</h6><p>字符串是由\0为结束标志</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>15、多维数组</title>
      <link href="/2018/10/11/15%E3%80%81%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2018/10/11/15%E3%80%81%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h5 id="1、什么是多维数组"><a href="#1、什么是多维数组" class="headerlink" title="1、什么是多维数组"></a>1、什么是多维数组</h5><p>可以简单地理解为由多个一维数组在不同的维度组合而成. 下文以二维数组为主。<a id="more"></a></p><h5 id="2、数组定义格式"><a href="#2、数组定义格式" class="headerlink" title="2、数组定义格式"></a>2、数组定义格式</h5><p>元素类型 数组名[元素个数][元素个数][…];</p><h5 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h5><h6 id="3-1、声明并初始化"><a href="#3-1、声明并初始化" class="headerlink" title="3.1、声明并初始化"></a>3.1、声明并初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int s[2][1] = &#123;&#123;1&#125;,&#123;2&#125;&#125;;</span><br></pre></td></tr></table></figure><h6 id="3-2、先声明后再初始化"><a href="#3-2、先声明后再初始化" class="headerlink" title="3.2、先声明后再初始化"></a>3.2、先声明后再初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int score[2][2];</span><br><span class="line">score[0][0] = 90;</span><br><span class="line">score[1][1] = 90;</span><br></pre></td></tr></table></figure><h6 id="3-3、声明不指定个数"><a href="#3-3、声明不指定个数" class="headerlink" title="3.3、声明不指定个数"></a>3.3、声明不指定个数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ss[][1] = &#123;&#123;1&#125;,&#123;2&#125;&#125;;</span><br></pre></td></tr></table></figure><h5 id="4、代码案例"><a href="#4、代码案例" class="headerlink" title="4、代码案例"></a>4、代码案例</h5><h6 id="4-1、源代码"><a href="#4-1、源代码" class="headerlink" title="4.1、源代码"></a>4.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int s[2][2] = &#123;&#123;0,1&#125;,&#123;1,2&#125;&#125;;</span><br><span class="line">for (int i = 0; i &lt; 2; ++i)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; 2; ++j)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;s[%d][%d]=%d\t&quot;,i,j,s[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-2、运行结果"><a href="#4-2、运行结果" class="headerlink" title="4.2、运行结果"></a>4.2、运行结果</h6><p><img src="/img/15/1.png" alt="运行结果"></p><h5 id="5、二维数组的内存分析"><a href="#5、二维数组的内存分析" class="headerlink" title="5、二维数组的内存分析"></a>5、二维数组的内存分析</h5><h6 id="5-1、源代码"><a href="#5-1、源代码" class="headerlink" title="5.1、源代码"></a>5.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int s[2][2] = &#123;&#123;0,1&#125;,&#123;1,2&#125;&#125;;</span><br><span class="line">printf(&quot;==========内存地址==========\n&quot;);</span><br><span class="line">printf(&quot;&amp;s=%p\n&quot;,&amp;s);</span><br><span class="line">printf(&quot;s=%p\n&quot;,s);</span><br><span class="line">printf(&quot;s[0]=%p\n&quot;,&amp;s[0]);</span><br><span class="line">printf(&quot;s[1]=%p\n&quot;,&amp;s[1]);</span><br><span class="line">printf(&quot;==========常用输出==========\n&quot;);</span><br><span class="line">for (int i = 0; i &lt; 2; ++i)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; 2; ++j)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;s[%d][%d]=%d\t,address=%p\n&quot;,i,j,s[i][j],&amp;s[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-2、运行结果"><a href="#5-2、运行结果" class="headerlink" title="5.2、运行结果"></a>5.2、运行结果</h6><p><img src="/img/15/2.png" alt="运行结果"></p><h6 id="5-3、内存分析"><a href="#5-3、内存分析" class="headerlink" title="5.3、内存分析"></a>5.3、内存分析</h6><ul><li>逻辑表格<br>|-|-|-|<br>|s[0]|-| s[0][0]|-| s[0][1]|<br>|s[1]|-| s[1][0]|-| s[1][1]|</li><li>物理图<br><img src="/img/15/3.png" alt="物理图"></li></ul><h6 id="5-4、总结"><a href="#5-4、总结" class="headerlink" title="5.4、总结"></a>5.4、总结</h6><p>多维数组，可以认为是数组的嵌套。可以从逻辑和物理两个角度进行了解。</p><ul><li>逻辑上可以理解为表格，分行和列</li><li>物理上，还是连续存储</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>14、数组</title>
      <link href="/2018/10/10/14%E3%80%81%E6%95%B0%E7%BB%84/"/>
      <url>/2018/10/10/14%E3%80%81%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h5 id="1、什么是数组"><a href="#1、什么是数组" class="headerlink" title="1、什么是数组"></a>1、什么是数组</h5><p>数组，从字面上看，就是一组数据的意思.因此,数组可以理解为用来存储一组数据的<a id="more"></a></p><h5 id="2、数组的特点"><a href="#2、数组的特点" class="headerlink" title="2、数组的特点"></a>2、数组的特点</h5><ul><li>只能存放一种类型的数据，比如int类型的数组、float类型的数组</li><li>里面存放的数据称为“元素”</li></ul><h5 id="3、数组定义格式"><a href="#3、数组定义格式" class="headerlink" title="3、数组定义格式"></a>3、数组定义格式</h5><p>元素类型 数组名[元素个数];<br>备注: 之所以需要元素个数，需要在内存中开辟存储空间。<br>比如, int score[4] 则需要在内存中开辟 4个int类型的空间</p><h5 id="4、初始化"><a href="#4、初始化" class="headerlink" title="4、初始化"></a>4、初始化</h5><h6 id="4-1、声明并初始化"><a href="#4-1、声明并初始化" class="headerlink" title="4.1、声明并初始化"></a>4.1、声明并初始化</h6><p>int score[3] = {90,89,90};</p><h6 id="4-2、先声明后再初始化"><a href="#4-2、先声明后再初始化" class="headerlink" title="4.2、先声明后再初始化"></a>4.2、先声明后再初始化</h6><p>int score[3];<br>score[0] = 90;<br>score[1] = 90;<br>score[2] = 90;</p><h6 id="4-3、声明不指定个数"><a href="#4-3、声明不指定个数" class="headerlink" title="4.3、声明不指定个数"></a>4.3、声明不指定个数</h6><p>int score[] = {90,89,90};</p><h6 id="4-4、数组使用"><a href="#4-4、数组使用" class="headerlink" title="4.4、数组使用"></a>4.4、数组使用</h6><p>数组名[index] {其中,index&gt;=0}</p><h5 id="5、代码实例"><a href="#5、代码实例" class="headerlink" title="5、代码实例"></a>5、代码实例</h5><h6 id="5-1、源代码"><a href="#5-1、源代码" class="headerlink" title="5.1、源代码"></a>5.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int score[3];</span><br><span class="line">score[0] = 1;</span><br><span class="line">score[1] = 2;</span><br><span class="line">score[2] = 3;</span><br><span class="line">for (int i = 0; i &lt; 3; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;score[%d]=%d\n&quot;,i,score[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-2、运行结果"><a href="#5-2、运行结果" class="headerlink" title="5.2、运行结果"></a>5.2、运行结果</h6><p><img src="/img/14/1.png" alt="运行结果"></p><h5 id="6、数组内存分析"><a href="#6、数组内存分析" class="headerlink" title="6、数组内存分析"></a>6、数组内存分析</h5><h6 id="6-1、源代码"><a href="#6-1、源代码" class="headerlink" title="6.1、源代码"></a>6.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int score[3];</span><br><span class="line">printf(&quot;&amp;score=%p\n&quot;,&amp;score);</span><br><span class="line">printf(&quot;score=%p\n&quot;,score);</span><br><span class="line">printf(&quot;score[0]=%p\n&quot;,&amp;score[0]);</span><br><span class="line">printf(&quot;===============================\n&quot;);</span><br><span class="line">score[0] = 1;</span><br><span class="line">score[1] = 2;</span><br><span class="line">score[2] = 3;</span><br><span class="line">for (int i = 0; i &lt; 3; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;score[%d]=%d\taddress:%p\n&quot;,i,score[i],&amp;score[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6-2、运行结果"><a href="#6-2、运行结果" class="headerlink" title="6.2、运行结果"></a>6.2、运行结果</h6><p><img src="/img/14/2.png" alt="运行结果"></p><h6 id="6-3、内存图"><a href="#6-3、内存图" class="headerlink" title="6.3、内存图"></a>6.3、内存图</h6><p><img src="/img/14/3.png" alt="运行结果"></p><h6 id="6-4、疑问"><a href="#6-4、疑问" class="headerlink" title="6.4、疑问"></a>6.4、疑问</h6><ul><li>&amp;是什么意思?<br>&amp;是获取变量在内存的地址操作符</li><li>为什么&amp;score、score、&amp;score[0]的内存地址相等？<br>这里有个”指针”的知识点，指针类型的变量是用来存放变量的内存地址，目前先把变量名score理解为是指向自己的指针。</li><li>声明数组时，为什么要指明元素个数?<br>便于开辟一段连续的内存地址空间</li><li>printf中的%p是什么意思<br>是以十六进制的格式打印内存地址</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>13、include语句使用</title>
      <link href="/2018/10/10/13%E3%80%81include%E8%AF%AD%E5%8F%A5%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/10/13%E3%80%81include%E8%AF%AD%E5%8F%A5%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="1、缘由"><a href="#1、缘由" class="headerlink" title="1、缘由"></a>1、缘由</h5><p>从之前函数的内容，可以知道，函数是起到把代码进行封装，以提高可复用性的作用。<a id="more"></a>一个.c程序行数很长，这个时候我们或许可以采用函数，进行封装优化。但程序有很多个函数，并且行数很长的情况下，不可能把所有内容都编写进同一个文件吧。一来可阅读性差，二来多人开发不好维护。这个时候，就要采用include语句，如下图所示<br><img src="/img/13/1.png" alt="include"></p><h5 id="2、include语句"><a href="#2、include语句" class="headerlink" title="2、include语句"></a>2、include语句</h5><p>include本质上所做的事情就是把其它文件的内容，包含进当前文件中</p><h5 id="3、案例"><a href="#3、案例" class="headerlink" title="3、案例"></a>3、案例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;include&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注: 这里的include就是把stdio.h的文件内容拷贝到当前文件中</p><h5 id="4、include语法"><a href="#4、include语法" class="headerlink" title="4、include语法"></a>4、include语法</h5><h6 id="4-1、源代码"><a href="#4-1、源代码" class="headerlink" title="4.1、源代码"></a>4.1、源代码</h6><p>源文件都处于同一个目录下</p><table><thead><tr><th>01.c</th><th>01.h</th></tr></thead><tbody><tr><td>#include&lt;stdio.h&gt;#include&lt;01.h&gt;int main(){    test();    return 0;}</td><td>void test(){    printf(“01.h-&gt;test()\n”);}</td></tr></tbody></table><h6 id="4-2、编译结果"><a href="#4-2、编译结果" class="headerlink" title="4.2、编译结果"></a>4.2、编译结果</h6><p><img src="/img/13/2.png" alt="编译结果"><br>这里提示,无法找到此文件</p><h6 id="4-3、解决"><a href="#4-3、解决" class="headerlink" title="4.3、解决"></a>4.3、解决</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;01.h&gt; 换成 #include&quot;01.h&quot;</span><br></pre></td></tr></table></figure><h6 id="4-4、重新编译"><a href="#4-4、重新编译" class="headerlink" title="4.4、重新编译"></a>4.4、重新编译</h6><p><img src="/img/13/3.png" alt="编译结果"></p><h5 id="5、include路径问题"><a href="#5、include路径问题" class="headerlink" title="5、include路径问题"></a>5、include路径问题</h5><h6 id="5-1、源代码"><a href="#5-1、源代码" class="headerlink" title="5.1、源代码"></a>5.1、源代码</h6><table><thead><tr><th>01.c</th><th>test/test.c</th><th>01.h</th></tr></thead><tbody><tr><td>#include&lt;stdio.h&gt;#include”01.h”#include”./test/test.c”int main(){    test();    echo();    return 0;}</td><td>void echo(){    printf(“this echo()\n”);}</td><td>void test(){    printf(“01.h-&gt;test()\n”);}</td></tr></tbody></table><h6 id="5-2、编译运行"><a href="#5-2、编译运行" class="headerlink" title="5.2、编译运行"></a>5.2、编译运行</h6><p><img src="/img/13/4.png" alt="编译结果"></p><h5 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h5><ul><li>include只是原封不动拷贝文件到包含处</li><li>&lt;&gt;和””的区别,&lt;&gt;是包含系统自带文件,””则是包含用户自定义的</li><li>后缀名.h是头文件</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>12、函数常见错误</title>
      <link href="/2018/10/09/12%E3%80%81%E5%87%BD%E6%95%B0%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/09/12%E3%80%81%E5%87%BD%E6%95%B0%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="一、常见错误"><a href="#一、常见错误" class="headerlink" title="一、常见错误"></a>一、常见错误</h4><h5 id="1、未定义先使用"><a href="#1、未定义先使用" class="headerlink" title="1、未定义先使用"></a>1、未定义先使用</h5><a id="more"></a><h6 id="1-1、源代码"><a href="#1-1、源代码" class="headerlink" title="1.1、源代码"></a>1.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printStr();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void printStr()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;printStr()\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2、运行结果"><a href="#1-2、运行结果" class="headerlink" title="1.2、运行结果:"></a>1.2、运行结果:</h6><p>无法通过编译环节,理由是 printStr未声明定义</p><h6 id="1-3、解决"><a href="#1-3、解决" class="headerlink" title="1.3、解决"></a>1.3、解决</h6><p>增加函数声明或者把函数定义放在调用处之前</p><h5 id="2、形参和实参不匹配"><a href="#2、形参和实参不匹配" class="headerlink" title="2、形参和实参不匹配"></a>2、形参和实参不匹配</h5><h6 id="2-1、源代码"><a href="#2-1、源代码" class="headerlink" title="2.1、源代码"></a>2.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void printStr(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;printStr()--&gt;%d,%d\n&quot;,a,b);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printStr(1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2、运行结果"><a href="#2-2、运行结果" class="headerlink" title="2.2、运行结果"></a>2.2、运行结果</h6><p>无法通过编译环节</p><h6 id="2-3、解决"><a href="#2-3、解决" class="headerlink" title="2.3、解决"></a>2.3、解决</h6><p>只能按照形参个数进行传递</p><h5 id="3、有多个函数名相同"><a href="#3、有多个函数名相同" class="headerlink" title="3、有多个函数名相同"></a>3、有多个函数名相同</h5><h6 id="3-1、源码"><a href="#3-1、源码" class="headerlink" title="3.1、源码"></a>3.1、源码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void test()</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">void test(int a)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2、运行结果"><a href="#3-2、运行结果" class="headerlink" title="3.2、运行结果"></a>3.2、运行结果</h6><p>无法通过编译环节</p><h5 id="4、基本类型参数是值传递"><a href="#4、基本类型参数是值传递" class="headerlink" title="4、基本类型参数是值传递"></a>4、基本类型参数是值传递</h5><h6 id="4-1、源代码"><a href="#4-1、源代码" class="headerlink" title="4.1、源代码"></a>4.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void changeValue(int a)</span><br><span class="line">&#123;</span><br><span class="line">a += 10;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = 10;</span><br><span class="line">changeValue(a);</span><br><span class="line">printf(&quot;a=%d\n&quot;,a);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-2、运行结果"><a href="#4-2、运行结果" class="headerlink" title="4.2、运行结果"></a>4.2、运行结果</h6><p><img src="/img/7/4.png" alt="运行结果"><br>既无法修改实参a的变量值</p><h6 id="4-3、内存图"><a href="#4-3、内存图" class="headerlink" title="4.3、内存图"></a>4.3、内存图</h6><p><img src="/img/7/5.png" alt="内存图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>11、函数运行案例</title>
      <link href="/2018/10/08/11%E3%80%81%E5%87%BD%E6%95%B0%E6%A1%88%E4%BE%8B/"/>
      <url>/2018/10/08/11%E3%80%81%E5%87%BD%E6%95%B0%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="一、代码案例"><a href="#一、代码案例" class="headerlink" title="一、代码案例"></a>一、代码案例</h4><h5 id="1、源代码"><a href="#1、源代码" class="headerlink" title="1、源代码"></a>1、源代码</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">// 1、函数声明</span><br><span class="line">// 无返回值</span><br><span class="line">void printString();</span><br><span class="line"></span><br><span class="line">// 返回两个整数的相加之和</span><br><span class="line">int sum(int a,int b);</span><br><span class="line"></span><br><span class="line">// 2、函数定义</span><br><span class="line">// 打印字符串</span><br><span class="line">void printString()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;打印函数-&gt;printString()\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 计算两个整数计算之和</span><br><span class="line">int sum(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">int c ;</span><br><span class="line">c = a + b;</span><br><span class="line">return c;</span><br><span class="line">printf(&quot;todo&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主函数</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">// 3、函数调用</span><br><span class="line">// 打印字符串</span><br><span class="line">printString();</span><br><span class="line"></span><br><span class="line">// 计算10+20之和</span><br><span class="line">int s;</span><br><span class="line">s = sum(10,20);</span><br><span class="line">printf(&quot;%d\n&quot;,s);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、运行结果"><a href="#2、运行结果" class="headerlink" title="2、运行结果"></a>2、运行结果</h5><p><img src="/img/7/2.png" alt="运行结果"></p><h4 id="二、运行分析"><a href="#二、运行分析" class="headerlink" title="二、运行分析"></a>二、运行分析</h4><h5 id="1、执行流程"><a href="#1、执行流程" class="headerlink" title="1、执行流程"></a>1、执行流程</h5><p><img src="/img/7/3.png" alt="运行结果"></p><h5 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h5><ul><li>函数定义时，最好先声明</li><li>return语句后的命令不会执行</li><li>函数被调用时，应先被声明定义</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>10、函数</title>
      <link href="/2018/10/08/10%E3%80%81%E5%87%BD%E6%95%B0/"/>
      <url>/2018/10/08/10%E3%80%81%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="一、什么是函数"><a href="#一、什么是函数" class="headerlink" title="一、什么是函数"></a>一、什么是函数</h4><p>任何一个C语言程序都是由一个或者多个程序段（小程序）构成的，每个程序段都有自己的功能，我们一般称这些程序段为“函数”。所以，可以这认为，C语言程序是由函数构成的。<a id="more"></a>如下图所示:<br><img src="/img/7/1.png" alt="函数"></p><h4 id="二、函数的声明"><a href="#二、函数的声明" class="headerlink" title="二、函数的声明"></a>二、函数的声明</h4><p>可以理解为是函数的使用规范</p><h4 id="三、函数的定义"><a href="#三、函数的定义" class="headerlink" title="三、函数的定义"></a>三、函数的定义</h4><h5 id="1、函数的存在目的"><a href="#1、函数的存在目的" class="headerlink" title="1、函数的存在目的"></a>1、函数的存在目的</h5><p>将一个常用的功能代码封装起来，方便以后调用</p><h5 id="2、定义函数的步骤"><a href="#2、定义函数的步骤" class="headerlink" title="2、定义函数的步骤"></a>2、定义函数的步骤</h5><ul><li>函数名: 明确函数作用，起一个有意义的函数名称</li><li>函数体: 函数是做什么的，里面包含了什么代码，明确函数的参数和返回值</li></ul><h5 id="3、函数格式"><a href="#3、函数格式" class="headerlink" title="3、函数格式"></a>3、函数格式</h5><h6 id="3-1、固定格式"><a href="#3-1、固定格式" class="headerlink" title="3.1、固定格式"></a>3.1、固定格式</h6><p>返回值类型  函数名(形式参数列表)<br>{<br>  函数体<br>}</p><h6 id="3-2、举例"><a href="#3-2、举例" class="headerlink" title="3.2、举例"></a>3.2、举例</h6><p>定义一个函数，计算两个整数的和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int sum(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">int c = a + b;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="四、函数的使用"><a href="#四、函数的使用" class="headerlink" title="四、函数的使用"></a>四、函数的使用</h4><h5 id="1、函数调用"><a href="#1、函数调用" class="headerlink" title="1、函数调用"></a>1、函数调用</h5><p>在主函数需要进行调用时，函数名(形参参数列表)</p><h5 id="2、形参和实参的基本概念"><a href="#2、形参和实参的基本概念" class="headerlink" title="2、形参和实参的基本概念"></a>2、形参和实参的基本概念</h5><ul><li>实参: 调用函数时传入的参数</li><li>形参: 定义函数时,函数名后面的参数</li><li>两者之间的关系是: 形参的类型、个数必须与实参一致，基本类型之间的传递是值传递</li></ul><h5 id="3、函数返回值"><a href="#3、函数返回值" class="headerlink" title="3、函数返回值"></a>3、函数返回值</h5><p>函数的运行结果</p><h6 id="3-1、return语句作用"><a href="#3-1、return语句作用" class="headerlink" title="3.1、return语句作用"></a>3.1、return语句作用</h6><p>把函数运行结果返回给调用方，并且把程序权也返回到调用处</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9、流程控制</title>
      <link href="/2018/10/07/9%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/10/07/9%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h5 id="1、控制语句分类"><a href="#1、控制语句分类" class="headerlink" title="1、控制语句分类"></a>1、控制语句分类</h5><a id="more"></a><table><thead><tr><th>语句类型</th><th>备注</th></tr></thead><tbody><tr><td>顺序语句</td><td>程序从上往下执行</td></tr><tr><td>选择语句</td><td>程序执行过程中根据内容选择不同的分支继续</td></tr><tr><td>循环语句</td><td>程序执行过程中需要重复执行某段语句</td></tr><tr><td>中断语句</td><td>改变控制语句执行流程</td></tr></tbody></table><h5 id="2、选择语句1"><a href="#2、选择语句1" class="headerlink" title="2、选择语句1"></a>2、选择语句1</h5><h6 id="2-1、单支语句"><a href="#2-1、单支语句" class="headerlink" title="2.1、单支语句"></a>2.1、单支语句</h6><p><img src="/img/6/1.png" alt="数据类型"></p><h6 id="2-2、双支语句"><a href="#2-2、双支语句" class="headerlink" title="2.2、双支语句"></a>2.2、双支语句</h6><p><img src="/img/6/2.png" alt="数据类型"></p><h6 id="2-3、多支语句"><a href="#2-3、多支语句" class="headerlink" title="2.3、多支语句"></a>2.3、多支语句</h6><p>由单支和双支语句组成</p><h6 id="2-4、代码案例"><a href="#2-4、代码案例" class="headerlink" title="2.4、代码案例"></a>2.4、代码案例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a=1,b=2;</span><br><span class="line">    // 1、if语句</span><br><span class="line">    if(a&gt;0)&#123;</span><br><span class="line">        printf(&quot;a&gt;0\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 2、if-else语句</span><br><span class="line">    if(a&gt;b)&#123;</span><br><span class="line">        printf(&quot;a&gt;b\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;a&lt;=b\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 3、多个if或if-else</span><br><span class="line">    if(a&gt;b)&#123;</span><br><span class="line">        printf(&quot;a&gt;b\n&quot;);</span><br><span class="line">    &#125;else if(a==b)&#123;</span><br><span class="line">        printf(&quot;a=b\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;a&lt;b\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、选择语句2"><a href="#3、选择语句2" class="headerlink" title="3、选择语句2"></a>3、选择语句2</h5><h6 id="3-1、switch"><a href="#3-1、switch" class="headerlink" title="3.1、switch"></a>3.1、switch</h6><p>当选择判断出现一些固定值判断时，则可以使用switch</p><h6 id="3-2、switch格式"><a href="#3-2、switch格式" class="headerlink" title="3.2、switch格式"></a>3.2、switch格式</h6><p><img src="/img/6/3.png" alt="数据类型"></p><h6 id="3-3、代码案例"><a href="#3-3、代码案例" class="headerlink" title="3.3、代码案例"></a>3.3、代码案例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i=1;</span><br><span class="line">    switch (i) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            printf(&quot;i=1\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        default:</span><br><span class="line">            printf(&quot;i\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-4、注意事项"><a href="#3-4、注意事项" class="headerlink" title="3.4、注意事项"></a>3.4、注意事项</h6><ul><li>case后面的语句如没有break，则会继续往下执行，直到遇到break语句，才跳出swtich</li><li>switch后面建议有默认的default的处理</li><li>switch后面的判断表达式，可以是int、string、枚举</li></ul><h5 id="4、循环语句"><a href="#4、循环语句" class="headerlink" title="4、循环语句"></a>4、循环语句</h5><h6 id="4-1、while语句or-for语句"><a href="#4-1、while语句or-for语句" class="headerlink" title="4.1、while语句or for语句"></a>4.1、while语句or for语句</h6><p><img src="/img/6/4.png" alt="数据类型"></p><h6 id="4-2、dowhile语句"><a href="#4-2、dowhile语句" class="headerlink" title="4.2、dowhile语句"></a>4.2、dowhile语句</h6><p><img src="/img/6/5.png" alt="数据类型"></p><h6 id="4-3、代码案例"><a href="#4-3、代码案例" class="headerlink" title="4.3、代码案例"></a>4.3、代码案例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i=5;</span><br><span class="line">    // 1、while</span><br><span class="line">    while (i&gt;0) &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,i);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 2、do-while</span><br><span class="line">    int j=5;</span><br><span class="line">    do &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,j);</span><br><span class="line">        j--;</span><br><span class="line">    &#125; while (j&gt;0);</span><br><span class="line">    </span><br><span class="line">    // 3、for语句</span><br><span class="line">    int z=5;</span><br><span class="line">    for (int z1=1; z1&lt;=z; z1++) &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,z1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-4、注意事项"><a href="#4-4、注意事项" class="headerlink" title="4.4、注意事项"></a>4.4、注意事项</h6><ul><li>编写循环语句必须要确定退出循环的条件，否则循环语句会一直执行</li><li>while和dowhile的区别是循环体是否先执行</li><li>for和while的本质是一样的，但for代码编写上比while更紧凑</li></ul><h5 id="5、中断语句"><a href="#5、中断语句" class="headerlink" title="5、中断语句"></a>5、中断语句</h5><table><thead><tr><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>break</td><td>用于强行退出循环，不执行循环剩余的语句。也可以用于switch语句</td></tr><tr><td>continue</td><td>用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句接着进行下一次是否执行循环的判断</td></tr></tbody></table><h6 id="5-1、代码"><a href="#5-1、代码" class="headerlink" title="5.1、代码"></a>5.1、代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i=5;</span><br><span class="line">    while(i&gt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        if(i==4)&#123;</span><br><span class="line">            printf(&quot;continue\n&quot;);</span><br><span class="line">            i--;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;i=%d\n&quot;,i);</span><br><span class="line">        if(i==1)&#123;</span><br><span class="line">            printf(&quot;break\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>8、运行符</title>
      <link href="/2018/10/06/8%E3%80%81%E8%BF%90%E8%A1%8C%E7%AC%A6/"/>
      <url>/2018/10/06/8%E3%80%81%E8%BF%90%E8%A1%8C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h5 id="1、概括表格"><a href="#1、概括表格" class="headerlink" title="1、概括表格"></a>1、概括表格</h5><a id="more"></a><table><thead><tr><th>运算符</th><th>具体操作</th></tr></thead><tbody><tr><td>算术运算符</td><td>+    -      /     *      %       ++      –</td></tr><tr><td>赋值运算符</td><td>=</td></tr><tr><td>关系运算符</td><td>&gt;,&lt;,&gt;=,&lt;=,==,!=</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp;,,!</td></tr><tr><td>位运算符</td><td>&amp;,</td><td>,^,~,&gt;&gt;,&lt;&lt;,</td></tr><tr><td>三目条件运算符</td><td>?:</td></tr><tr><td>扩展赋值运算符</td><td>+=,-=,*=,/=</td></tr></tbody></table><h5 id="2、逻辑运算符"><a href="#2、逻辑运算符" class="headerlink" title="2、逻辑运算符"></a>2、逻辑运算符</h5><h6 id="2-1、逻辑与-amp-amp"><a href="#2-1、逻辑与-amp-amp" class="headerlink" title="2.1、逻辑与 &amp;&amp;"></a>2.1、逻辑与 &amp;&amp;</h6><table><thead><tr><th>A</th><th>&amp;&amp;</th><th>B</th><th>result</th></tr></thead><tbody><tr><td>true</td><td>&amp;&amp;</td><td>false</td><td>false</td></tr><tr><td>true</td><td>&amp;&amp;</td><td>true</td><td>true</td></tr><tr><td>flase</td><td>&amp;&amp;</td><td>false</td><td>flase</td></tr><tr><td>flase</td><td>&amp;&amp;</td><td>true</td><td>true</td></tr></tbody></table><h6 id="2-2、逻辑或"><a href="#2-2、逻辑或" class="headerlink" title="2.2、逻辑或||"></a>2.2、逻辑或||</h6><table><thead><tr><th>A</th><th></th><th>B result</th></tr></thead><tbody><tr><td>true</td><td></td><td>false true</td></tr><tr><td>true</td><td></td><td>true true</td></tr><tr><td>flase</td><td></td><td>false flase</td></tr><tr><td>flase</td><td></td><td>true true</td></tr></tbody></table><h6 id="2-3、逻辑取反"><a href="#2-3、逻辑取反" class="headerlink" title="2.3、逻辑取反!"></a>2.3、逻辑取反!</h6><table><thead><tr><th>A</th><th>!</th><th>result</th></tr></thead><tbody><tr><td>true</td><td>!</td><td>false</td></tr><tr><td>flase</td><td>!</td><td>true</td></tr></tbody></table><h6 id="2-4、总结"><a href="#2-4、总结" class="headerlink" title="2.4、总结"></a>2.4、总结</h6><ul><li>逻辑与中如有一个操作数为false，则结果必为false</li><li>逻辑或中如有一个操作数为true，则结果必为true</li><li>针对逻辑与和逻辑或可以采用短路方式。即从左往右计算，如果确定值则不会再计算下去</li></ul><h5 id="3、位运算"><a href="#3、位运算" class="headerlink" title="3、位运算"></a>3、位运算</h5><h6 id="3-1、符号汇总"><a href="#3-1、符号汇总" class="headerlink" title="3.1、符号汇总"></a>3.1、符号汇总</h6><table><thead><tr><th>符号</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>~</td><td>取反</td><td></td></tr><tr><td></td><td></td><td>按位或</td><td></td></tr><tr><td>&amp;</td><td>按位与</td><td></td></tr><tr><td>^</td><td>按位异或</td><td></td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>左移一位则相当于乘2</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>右移一位则相当于除2取商</td></tr></tbody></table><h6 id="3-2、按位或例子说明"><a href="#3-2、按位或例子说明" class="headerlink" title="3.2、按位或例子说明"></a>3.2、按位或例子说明</h6><p>|操作数 |按位或|<br>|2 |00000010|<br>|3 |00000011|<br>|结果 |3|</p><h5 id="4、拓展运算"><a href="#4、拓展运算" class="headerlink" title="4、拓展运算"></a>4、拓展运算</h5><table><thead><tr><th>符号</th><th>例子</th><th>备注</th></tr></thead><tbody><tr><td>++</td><td>a++</td><td>a自增一</td></tr><tr><td>–</td><td>a–</td><td>a自减一</td></tr></tbody></table><h6 id="4-1、注意事项"><a href="#4-1、注意事项" class="headerlink" title="4.1、注意事项"></a>4.1、注意事项</h6><p>符号放在操作数前面还是后面有区别</p><pre><code>* ++a 则代表a先自增1，再进行其它操作    * a++ 则代表a先进行其它操作，再自增1</code></pre><h5 id="5、三目运算符"><a href="#5、三目运算符" class="headerlink" title="5、三目运算符"></a>5、三目运算符</h5><h6 id="5-1、语法格式"><a href="#5-1、语法格式" class="headerlink" title="5.1、语法格式"></a>5.1、语法格式</h6><p>x?y:z;<br>其中x为boolean类型表达式，如果x为ture，则该表达式的结果为y，否则则为z</p><h6 id="5-2、应用场景"><a href="#5-2、应用场景" class="headerlink" title="5.2、应用场景"></a>5.2、应用场景</h6><p>用于代替ifelse语句，简化代码，提高代码阅读性</p><h5 id="6、运算符优先级"><a href="#6、运算符优先级" class="headerlink" title="6、运算符优先级"></a>6、运算符优先级</h5><p>表达式里面使用小括号</p><h5 id="7、代码案例"><a href="#7、代码案例" class="headerlink" title="7、代码案例"></a>7、代码案例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    // 1、赋值</span><br><span class="line">    i = 10;</span><br><span class="line">    j = 20;</span><br><span class="line">    // 2、算术运算</span><br><span class="line">    printf(&quot;i+j=%d\n&quot;,(i+j));</span><br><span class="line">    printf(&quot;i-j=%d\n&quot;,(i-j));</span><br><span class="line">    printf(&quot;i*j=%d\n&quot;,(i*j));</span><br><span class="line">    printf(&quot;j/i=%d\n&quot;,(j/i));</span><br><span class="line">    // 3、拓展运算</span><br><span class="line">    printf(&quot;i++=%d\n&quot;,i++);</span><br><span class="line">    printf(&quot;++i=%d\n&quot;,++i);</span><br><span class="line">    // 4、关系运算</span><br><span class="line">    if(j&gt;i)&#123;</span><br><span class="line">        printf(&quot;j&gt;i\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 5、逻辑运算</span><br><span class="line">    if( (j==20) &amp;&amp; (j&gt;i) )&#123;</span><br><span class="line">        printf(&quot;j=20 and j&gt;i\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>7、数据类型</title>
      <link href="/2018/10/05/7%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/10/05/7%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h5><p>数据类型是约束变量行为操作。由于C语言是编译型，因此每个变量在被使用前，均都需要先定义声明，才能被使用。<br><a id="more"></a></p><h5 id="2、C语言数据类型分类"><a href="#2、C语言数据类型分类" class="headerlink" title="2、C语言数据类型分类"></a>2、C语言数据类型分类</h5><p><img src="/img/5/1.png" alt="数据类型"></p><h5 id="3、普通类型案例"><a href="#3、普通类型案例" class="headerlink" title="3、普通类型案例"></a>3、普通类型案例</h5><h6 id="3-1、源代码"><a href="#3-1、源代码" class="headerlink" title="3.1、源代码"></a>3.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">// 打印各个数据类型的值</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //1、打印整形</span><br><span class="line">    int i = 100;</span><br><span class="line">    printf(&quot;i=%d\n&quot;,i);</span><br><span class="line">    </span><br><span class="line">    //2、打印浮点型</span><br><span class="line">    float f = 9.44444444444;</span><br><span class="line">    printf(&quot;f=%f\n&quot;,f);</span><br><span class="line">    // 打印保留小数点后9位</span><br><span class="line">    printf(&quot;f=%.9f\n&quot;,f);</span><br><span class="line">    </span><br><span class="line">    //3、打印双精度浮点型</span><br><span class="line">    double d = 9.44444444444;</span><br><span class="line">    printf(&quot;d=%f\n&quot;,d);</span><br><span class="line">    // 打印保留小数点后9位</span><br><span class="line">    printf(&quot;d=%.9f\n&quot;,d);</span><br><span class="line">    </span><br><span class="line">    //4、打印单个字符</span><br><span class="line">    char c = &apos;h&apos;;</span><br><span class="line">    printf(&quot;c=%c\n&quot;,c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2、运行结果"><a href="#3-2、运行结果" class="headerlink" title="3.2、运行结果"></a>3.2、运行结果</h6><p><img src="/img/5/2.png" alt="运行结果"></p><h6 id="3-3、总结"><a href="#3-3、总结" class="headerlink" title="3.3、总结"></a>3.3、总结</h6><ul><li>打印函数 printf中 %d代表打印整数、%c代表打印字符、%f代表打印浮点型，其中支持输出小位数</li><li>浮点型可分为float、double、其中精度是double大于float</li></ul><h5 id="4、数据类型占用内存字节数"><a href="#4、数据类型占用内存字节数" class="headerlink" title="4、数据类型占用内存字节数"></a>4、数据类型占用内存字节数</h5><h6 id="4-1、源代码"><a href="#4-1、源代码" class="headerlink" title="4.1、源代码"></a>4.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">// sizeof 打印各个数据类型所占用的内存字节数</span><br><span class="line">// 格式1: sizeof(变量|常量)</span><br><span class="line">// 格式2: sizeof 变量|常量</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //1、整形</span><br><span class="line">    int i;</span><br><span class="line">    int size1 = sizeof i;</span><br><span class="line">    printf(&quot;整形字节数:%d\n&quot;,size1);</span><br><span class="line">    </span><br><span class="line">    //2、浮点型</span><br><span class="line">    float f;</span><br><span class="line">    int size2 = sizeof(f);</span><br><span class="line">    printf(&quot;浮点型字节数:%d\n&quot;,size2);</span><br><span class="line"></span><br><span class="line">    //3、双精度浮点型</span><br><span class="line">    double d;</span><br><span class="line">    int size3 = sizeof d;</span><br><span class="line">    printf(&quot;双精度浮点型字节数:%d\n&quot;,size3);</span><br><span class="line">    </span><br><span class="line">    //4、字符</span><br><span class="line">    char c;</span><br><span class="line">    int size4 = sizeof c;</span><br><span class="line">    printf(&quot;字符字节数:%d\n&quot;,size4);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-2、运行结果"><a href="#4-2、运行结果" class="headerlink" title="4.2、运行结果"></a>4.2、运行结果</h6><p><img src="/img/5/3.png" alt="运行结果"></p><h6 id="4-3、总结"><a href="#4-3、总结" class="headerlink" title="4.3、总结"></a>4.3、总结</h6><ul><li>sizeof可以用显示变量或常量占用的内存字节数</li><li>通过知道数据类型所占用的字节数，就能知道通过该类型定义的变量的字节数</li></ul><h5 id="5、类型转换"><a href="#5、类型转换" class="headerlink" title="5、类型转换"></a>5、类型转换</h5><p>是指普通数据类型之间在程序运行过程中，发生了数据类型的改变。</p><h6 id="5-1、源代码"><a href="#5-1、源代码" class="headerlink" title="5.1、源代码"></a>5.1、源代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line">// 1、显示转换</span><br><span class="line">    int j = 99;</span><br><span class="line">    printf(&quot;%f\n&quot;,(float)j);</span><br><span class="line">    printf(&quot;%f\n&quot;,(double)j);</span><br><span class="line">    </span><br><span class="line">    float fj = 99.999999;</span><br><span class="line">    printf(&quot;%d\n&quot;,(int)fj);</span><br><span class="line">    </span><br><span class="line">    double fd = 99.999999999;</span><br><span class="line">    printf(&quot;%f\n&quot;,(float)fd);</span><br><span class="line">    </span><br><span class="line">    // 2、隐式转换</span><br><span class="line">    int j1 = 10;</span><br><span class="line">    float fj1 = 10.0;</span><br><span class="line">    printf(&quot;%f\n&quot;,j1+fj1);</span><br><span class="line">    //printf(&quot;%d\n&quot;,j1+fj1); // 报错</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>6、变量内存分析</title>
      <link href="/2018/10/04/6%E3%80%81%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
      <url>/2018/10/04/6%E3%80%81%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h5 id="1、什么是内存"><a href="#1、什么是内存" class="headerlink" title="1、什么是内存"></a>1、什么是内存</h5><p>之前文章有提到，动态数据。动态数据需要存储介质进行存放。这个介质就叫内存。<a id="more"></a></p><h5 id="2、内存存在的目的"><a href="#2、内存存在的目的" class="headerlink" title="2、内存存在的目的"></a>2、内存存在的目的</h5><p>缓冲地带，解决了静态数据(硬盘中)与CPU的交互速度。<br><img src="/img/4/1.png" alt="交互"></p><h5 id="3、内存地址"><a href="#3、内存地址" class="headerlink" title="3、内存地址"></a>3、内存地址</h5><p>内存地址是一个编号，代表一个内存空间。而在计算机中存储器的容量是以字节为基本单位的。也就是说一个内存地址代表一个字节（8bit）的存储空间。</p><h5 id="4、理解内存地址"><a href="#4、理解内存地址" class="headerlink" title="4、理解内存地址"></a>4、理解内存地址</h5><h6 id="4-1、测试源代码scanf-c"><a href="#4-1、测试源代码scanf-c" class="headerlink" title="4.1、测试源代码scanf.c"></a>4.1、测试源代码scanf.c</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">// 声明变量a为整形类型</span><br><span class="line">int a;</span><br><span class="line">// 等待输入整形数据，并把值赋给变量a</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">// 打印变量a的内容</span><br><span class="line">printf(&quot;%d&quot;,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-2、运行结果"><a href="#4-2、运行结果" class="headerlink" title="4.2、运行结果"></a>4.2、运行结果</h6><p><img src="/img/4/2.png" alt="运行结果"></p><h6 id="4-3、执行流程"><a href="#4-3、执行流程" class="headerlink" title="4.3、执行流程"></a>4.3、执行流程</h6><p><img src="/img/4/3.png" alt="执行流程"></p><h6 id="4-4、内存分布"><a href="#4-4、内存分布" class="headerlink" title="4.4、内存分布"></a>4.4、内存分布</h6><p><img src="/img/4/4.png" alt="内存分布"></p><h6 id="4-5、描述"><a href="#4-5、描述" class="headerlink" title="4.5、描述"></a>4.5、描述</h6><ul><li>变量等标识符说白了是便于程序员阅读，而计算机是无法识别的。因此最终变量还是得转换为内存地址才能被计算机所运行</li><li>而变量能转换为具体的内存地址，则依靠”符号表”作为映射，才能正常工作</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5、常见术语</title>
      <link href="/2018/10/04/5%E3%80%81%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD/"/>
      <url>/2018/10/04/5%E3%80%81%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="一、关键字"><a href="#一、关键字" class="headerlink" title="一、关键字"></a>一、关键字</h4><p>关键字就是C语言提供的有特殊含义的符号<br>C语言一共提供了32个关键字，这些关键字都被C语言赋予了特殊含义<a id="more"></a><br>auto double int struct break else long switch<br>case enum register typedef char extern return union<br>const float short unsigned continue for signed void<br>default goto sizeof volatile do if while static</p><h5 id="1、关键字特征"><a href="#1、关键字特征" class="headerlink" title="1、关键字特征"></a>1、关键字特征</h5><ul><li>通常都是小写</li><li>在编辑器中一般会有特殊颜色显示</li></ul><h4 id="二、标识符"><a href="#二、标识符" class="headerlink" title="二、标识符"></a>二、标识符</h4><p>标识符就是在程序中自定义的一些符号和名称。要跟关键字区分开来：关键字是C语言默认提供的符号，标识符是程序员自定义的</p><h5 id="1、标识符作用"><a href="#1、标识符作用" class="headerlink" title="1、标识符作用"></a>1、标识符作用</h5><p>  用来标识某些东西的符号，标识的目的就是为了将这些东西区分开来</p><h5 id="2、命名规则"><a href="#2、命名规则" class="headerlink" title="2、命名规则"></a>2、命名规则</h5><ul><li>只能由26个英文字母的大小写、10个阿拉伯数字0~9、下划线_组成</li><li>严格区分大小写，比如test和Test是2个不同的标识符</li><li>不能以数字开头</li><li>不可以使用关键字作为标识符</li></ul><h4 id="三、注释"><a href="#三、注释" class="headerlink" title="三、注释"></a>三、注释</h4><p>注释从字面意思上理解就是注解、解释的意思。是可以用来解释某一段程序或者某一行代码是什么意思，方便程序员之间的交流</p><h5 id="1、单行注释"><a href="#1、单行注释" class="headerlink" title="1、单行注释"></a>1、单行注释</h5><ul><li>单行注释以两个正斜杠开头，也就是以//开头，只能注释一行，从//开始到这行的结尾都是注释的内容</li><li>任何地方都可以写注释：函数外面、里面，每一条语句后面</li></ul><h5 id="2、多行注释"><a href="#2、多行注释" class="headerlink" title="2、多行注释"></a>2、多行注释</h5><p>多行注释以/<em>开头，以</em>/结尾，/<em>和</em>/中间的内容都是注释</p><h4 id="四、数据"><a href="#四、数据" class="headerlink" title="四、数据"></a>四、数据</h4><p>在我们使用计算机的过程中，会接触到各种各样的数据,如文档、图片、视频等等</p><h5 id="1、数据分类"><a href="#1、数据分类" class="headerlink" title="1、数据分类"></a>1、数据分类</h5><h6 id="1-1、静态数据"><a href="#1-1、静态数据" class="headerlink" title="1.1、静态数据"></a>1.1、静态数据</h6><p>静态数据是指一些永久性的数据，一般存储在硬盘中.计算机关闭之后再开启，这些数据依旧还在，只要你不主动删掉或者硬盘没坏，这些数据永远都在</p><h6 id="1-2、动态数据"><a href="#1-2、动态数据" class="headerlink" title="1.2、动态数据"></a>1.2、动态数据</h6><p>动态数据指在程序运行过程中，动态产生的临时数据，一般存储在内存中,计算机关闭之后，这些临时数据就会被清除</p><h5 id="2、两者之间的关系"><a href="#2、两者之间的关系" class="headerlink" title="2、两者之间的关系"></a>2、两者之间的关系</h5><p>可以互相转换</p><h5 id="3、数据的大小"><a href="#3、数据的大小" class="headerlink" title="3、数据的大小"></a>3、数据的大小</h5><p>1 KB = 1024 B，1 MB = 1024 KB，1 GB = 1024 MB，1 TB = 1024 GB</p><h4 id="五、常量与变量"><a href="#五、常量与变量" class="headerlink" title="五、常量与变量"></a>五、常量与变量</h4><p>在程序运行过程中，常量与变量是相对的。</p><h5 id="1、常量"><a href="#1、常量" class="headerlink" title="1、常量"></a>1、常量</h5><p>程序运行过程中，常量是指固定不变数据</p><h5 id="2、变量"><a href="#2、变量" class="headerlink" title="2、变量"></a>2、变量</h5><p>程序运行过程中，一个数据的值需要经常改变或者不确定时，就应该用变量来表示</p><h5 id="3、变量操作"><a href="#3、变量操作" class="headerlink" title="3、变量操作"></a>3、变量操作</h5><p>任何变量在使用之前，必须先进行定义</p><h6 id="3-1、定义变量目的"><a href="#3-1、定义变量目的" class="headerlink" title="3.1、定义变量目的"></a>3.1、定义变量目的</h6><p>在内存中分配一块存储空间给变量，方便以后存储数据</p><h6 id="3-2、定义变量格式"><a href="#3-2、定义变量格式" class="headerlink" title="3.2、定义变量格式"></a>3.2、定义变量格式</h6><p>变量类型  变量名</p><ul><li>变量名应满足标识符的要求</li><li>变量类型则是告诉编译器需要多少内存空间</li></ul><h6 id="3-3、变量使用"><a href="#3-3、变量使用" class="headerlink" title="3.3、变量使用"></a>3.3、变量使用</h6><ul><li>变量赋值: 往变量里面存点东西</li><li>变量运算: 由变量类型决定</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4、程序常见错误</title>
      <link href="/2018/10/03/4%E3%80%81%E7%A8%8B%E5%BA%8F%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/03/4%E3%80%81%E7%A8%8B%E5%BA%8F%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="一、程序常见错误"><a href="#一、程序常见错误" class="headerlink" title="一、程序常见错误"></a>一、程序常见错误</h4><h5 id="1、文件后缀名"><a href="#1、文件后缀名" class="headerlink" title="1、文件后缀名"></a>1、文件后缀名<a id="more"></a></h5><ul><li>把上一节的hello.c，换成hello.txt</li><li>编译操作<br><img src="/img/3/1.png" alt="编译操作"><blockquote><p>总结:  也就是说，编译器只能编译.c后缀的文件名</p></blockquote></li></ul><h5 id="2、无main函数"><a href="#2、无main函数" class="headerlink" title="2、无main函数"></a>2、无main函数</h5><ul><li>把上一节的hello.c中的main换成其它名称</li><li>编译操作<br><img src="/img/3/2.png" alt="编译操作"><blockquote><p>总结:  编译通过，但无法进行链接</p></blockquote></li></ul><h5 id="3、无包含内置类库"><a href="#3、无包含内置类库" class="headerlink" title="3、无包含内置类库"></a>3、无包含内置类库</h5><ul><li>把上一节的hello.c中的”#include&lt;stdio.h&gt;”去掉</li><li>编译操作<br><img src="/img/3/3.png" alt="编译操作"><blockquote><p>总结:  也就是说，去掉时，则无法识别printf函数</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3、第一个C语言程序</title>
      <link href="/2018/10/02/3%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAC%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/10/02/3%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAC%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="一、第一个C语言程序"><a href="#一、第一个C语言程序" class="headerlink" title="一、第一个C语言程序"></a>一、第一个C语言程序</h4><h5 id="1、运行环境说明"><a href="#1、运行环境说明" class="headerlink" title="1、运行环境说明"></a>1、运行环境说明</h5><p>win10、mingw32<a id="more"></a></p><h5 id="2、源代码"><a href="#2、源代码" class="headerlink" title="2、源代码"></a>2、源代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 包含内置类库</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// int  为整形类型，意在强调返回类型为整形</span><br><span class="line">// main 为入口函数</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">// printf为打印函数，本程序打印 &quot;hello world&quot;</span><br><span class="line">printf(&quot;hello world.&quot;);</span><br><span class="line">// return为返回操作</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注: 把文件保存为hello.c，并保存在本地电脑目录d:/C/cstudy中</p></blockquote><h5 id="3、运行源代码"><a href="#3、运行源代码" class="headerlink" title="3、运行源代码"></a>3、运行源代码</h5><h6 id="3-1、打开mingw32"><a href="#3-1、打开mingw32" class="headerlink" title="3.1、打开mingw32"></a>3.1、打开mingw32</h6><ul><li>进入d:/C/cstudy中</li><li>使用命令gcc，进行如下操作<br><img src="/img/2/1.png" alt="gcc操作"></li><li>运行程序<br><img src="/img/2/2.png" alt="运行结果"></li></ul><h5 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h5><h6 id="4-1、整个过程运行总结"><a href="#4-1、整个过程运行总结" class="headerlink" title="4.1、整个过程运行总结"></a>4.1、整个过程运行总结</h6><p><img src="/img/2/3.png" alt="总结"></p><blockquote><p>备注: 从运行图可以知道，如果源代码发生修改，则只能重新编译链接才行运行</p></blockquote><h6 id="4-2、常见文件格式总结"><a href="#4-2、常见文件格式总结" class="headerlink" title="4.2、常见文件格式总结"></a>4.2、常见文件格式总结</h6><ul><li>.c格式的文件为C源代码程序文件</li><li>.o为编译后的文件</li><li>.exe或.out则是链接后的文件</li></ul><h6 id="4-3、gcc命令总结"><a href="#4-3、gcc命令总结" class="headerlink" title="4.3、gcc命令总结"></a>4.3、gcc命令总结</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -c 文件名.c 编译操作</span><br><span class="line">gcc -o 文件名.o 链接操作</span><br><span class="line">./a.exe  运行程序</span><br><span class="line">gcc 文件名.c 直接编译、链接</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2、C语言简介</title>
      <link href="/2018/10/02/2%E3%80%81C%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/10/02/2%E3%80%81C%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="一、C语言简介"><a href="#一、C语言简介" class="headerlink" title="一、C语言简介"></a>一、C语言简介</h4><h5 id="1、学习C语言的原因"><a href="#1、学习C语言的原因" class="headerlink" title="1、学习C语言的原因"></a>1、学习C语言的原因</h5><p>C是所有编程语言中的经典，很多高级语言都是从C语言中衍生出来的，比如C++、C#、Objective-C等<br><a id="more"></a></p><h5 id="2、简史"><a href="#2、简史" class="headerlink" title="2、简史"></a>2、简史</h5><p>C语言于1972年发明，首次使用是用于重写UINX操作系统(UNIX以前主要是用汇编语言写的，它奠定了操作系统的基础)</p><h5 id="3、特点"><a href="#3、特点" class="headerlink" title="3、特点"></a>3、特点</h5><ul><li>丰富的运算符</li><li>丰富的数据类型</li><li>可以直接操作硬件</li><li>高效的目标代码</li><li>可移植性好</li></ul><h5 id="4、主要用途"><a href="#4、主要用途" class="headerlink" title="4、主要用途"></a>4、主要用途</h5><ul><li>编写系统软件、图形处理、单片机程序、嵌入式系统开发</li><li>编写游戏外挂</li><li>衍生其它语言</li></ul><h5 id="5、版本原因"><a href="#5、版本原因" class="headerlink" title="5、版本原因"></a>5、版本原因</h5><ul><li>1983年美国国家标准局(American National Standards Institute，简称ANSI)成立了一个委员会，开始制定C语言标准的工作</li><li>1989年C语言标准被批准，这个版本的C语言标准通常被称为ANSI C</li><li>1999年，国际标准化组织ISO又对C语言标准进行修订，在基本保留原来C语言特征的基础上，针对应该的需要，增加了一些功能，命名为C99</li><li>2011年12月8日，ISO正式公布C语言新的国际标准草案：C11</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1、计算机和软件常识</title>
      <link href="/2018/10/02/1%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%92%8C%E8%BD%AF%E4%BB%B6%E5%B8%B8%E8%AF%86/"/>
      <url>/2018/10/02/1%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%92%8C%E8%BD%AF%E4%BB%B6%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h4 id="一、计算机和软件常识"><a href="#一、计算机和软件常识" class="headerlink" title="一、计算机和软件常识"></a>一、计算机和软件常识</h4><h5 id="1、计算机核心硬件"><a href="#1、计算机核心硬件" class="headerlink" title="1、计算机核心硬件"></a>1、计算机核心硬件</h5><ul><li>核心硬件:  硬盘、内存、CPU</li><li>核心硬件运作图<a id="more"></a><br><img src="/img/1/1_01.png" alt="运作图"></li></ul><h5 id="2、计算机识别机制"><a href="#2、计算机识别机制" class="headerlink" title="2、计算机识别机制"></a>2、计算机识别机制</h5><p>计算机能够识别0和1</p><h5 id="3、计算机和软件的联系"><a href="#3、计算机和软件的联系" class="headerlink" title="3、计算机和软件的联系"></a>3、计算机和软件的联系</h5><ul><li>软件的基本概念:  指令的集合</li><li>两者的联系:  可以通过软件来控制计算机</li></ul><h5 id="4、计算机语言"><a href="#4、计算机语言" class="headerlink" title="4、计算机语言"></a>4、计算机语言</h5><ul><li>一门可以与计算机打交道的”语言”</li><li>方便编写指令</li></ul><h4 id="二、计算机语言发展史"><a href="#二、计算机语言发展史" class="headerlink" title="二、计算机语言发展史"></a>二、计算机语言发展史</h4><h5 id="1、顺序图"><a href="#1、顺序图" class="headerlink" title="1、顺序图"></a>1、顺序图</h5><p><img src="/img/1/1_02.png" alt="运作图"></p><h5 id="2、机器语言"><a href="#2、机器语言" class="headerlink" title="2、机器语言"></a>2、机器语言</h5><p>所有代码里面只有0和1，每一条指令称为“机器指令”</p><h6 id="2-1、优点"><a href="#2-1、优点" class="headerlink" title="2.1、优点"></a>2.1、优点</h6><ul><li>代码能被计算机直接识别，直接对硬件产生作用，程序的执行效率非常高</li></ul><h6 id="2-2、缺点"><a href="#2-2、缺点" class="headerlink" title="2.2、缺点"></a>2.2、缺点</h6><ul><li>程序全是些0和1的指令代码，可读性差，还容易出错</li><li>对硬件的依赖性很强，因此不同型号计算机的机器语言又不一样</li><li>要熟记所用计算机的全部指令和指令的涵义，指令又多又难记</li></ul><h6 id="2-3、使用场景"><a href="#2-3、使用场景" class="headerlink" title="2.3、使用场景"></a>2.3、使用场景</h6><p>机器语言很难掌握和推广，现在除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言</p><h5 id="3、汇编语言"><a href="#3、汇编语言" class="headerlink" title="3、汇编语言"></a>3、汇编语言</h5><p>用英文单词等符号代替机器指令</p><h6 id="3-1、优点"><a href="#3-1、优点" class="headerlink" title="3.1、优点"></a>3.1、优点</h6><ul><li>像机器语言一样，可以直接访问、控制计算机的各种硬件设备，不过指令好理解易懂</li></ul><h6 id="3-2、缺点"><a href="#3-2、缺点" class="headerlink" title="3.2、缺点"></a>3.2、缺点</h6><ul><li>不同的机器有不同的汇编语言语法和编译器，代码缺乏可移植性</li></ul><h6 id="3-3、使用场景"><a href="#3-3、使用场景" class="headerlink" title="3.3、使用场景"></a>3.3、使用场景</h6><ul><li>操作系统内核、驱动程序、单片机程序</li><li>软件的加密、解密、破解</li><li>病毒的制作、防治</li><li>程序的调试、分析</li></ul><h5 id="4、高级语言"><a href="#4、高级语言" class="headerlink" title="4、高级语言"></a>4、高级语言</h5><p>接近自然语言</p><h6 id="4-1、优点"><a href="#4-1、优点" class="headerlink" title="4.1、优点"></a>4.1、优点</h6><ul><li>简单、易用、易于理解，语法和结构类似于普通英文</li><li>远离对硬件的直接操作，使得一般人经过学习之后都可以编程，而不用太熟悉硬件知识</li><li>一个程序还可以在不同的机器上运行，具有可移植性</li></ul><h6 id="4-2、缺点"><a href="#4-2、缺点" class="headerlink" title="4.2、缺点"></a>4.2、缺点</h6><ul><li>程序不能直接被计算机识别，需要经编译器翻译成二进制指令后，才能运行到计算机上</li></ul><h6 id="4-3、分类"><a href="#4-3、分类" class="headerlink" title="4.3、分类"></a>4.3、分类</h6><p>高级语言按照”看问题”的角度，可分为”面向过程”和”面向对象”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程常识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Iamasb</title>
      <link href="/2018/10/01/Iamasb/"/>
      <url>/2018/10/01/Iamasb/</url>
      
        <content type="html"><![CDATA[<p>Iamasb 是 I‘m a scripboy(我是脚本小子)的缩写.当然,可以认为自己是个’sb’.^_^<br><a id="more"></a><br>自己从事web领域，主要开发语言php。因此称呼自己为脚本小子，也是自然不过了。</p><hr><h5 id="建立博客初心"><a href="#建立博客初心" class="headerlink" title="建立博客初心"></a>建立博客初心</h5><p>趁年轻，用直白的话，记录下.用信息诠释价值.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 个人简介 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
  
</search>
